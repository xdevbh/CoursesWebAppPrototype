@page "/info/course/{id:int}"
@inject NavigationManager NavigationManager

<PageTitle>@title</PageTitle>

<MudStack>
    <MudImage Src="@(_course.ImagePath)" Alt="@_course.Name" Height="300"
              Elevation="25" Class="rounded-lg" ObjectFit="ObjectFit.Cover"/>
        <MudCard>
            <MudCardContent>
                <MudStack >
                    <MudText Typo="Typo.h4">@_course.Name</MudText>
                    <MudStack Justify="Justify.FlexStart" Row="true">
                        <MudChip Icon="@Icons.Material.Filled.InterpreterMode">@_course.TeacherName</MudChip>
                        <MudChip Icon="@Icons.Material.Filled.AccessTime">@_course.Duration h</MudChip>
                    </MudStack>
                    <MudRating SelectedValue="@_course.Rating" ReadOnly="true"/>
                </MudStack>
            </MudCardContent>
        </MudCard>
        
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.body1">@_course.Description</MudText>
        <MudText Typo="Typo.body1">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus vel auctor est, id ullamcorper nunc. Nam tincidunt nunc quis erat egestas cursus. Donec tincidunt a enim ac gravida. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Vivamus efficitur lectus nec mollis lobortis.</MudText>
        </MudPaper>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.body1">@_course.NumberOfStudents students enrolled in the course.</MudText>
            <MudText Typo="Typo.body1">Would you like to enroll, too?</MudText>
        </MudCardContent>
        <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                   OnClick="() => GoToCourse(_course.Id)" EndIcon="@Icons.Material.Filled.PlayArrow">
            Enroll
        </MudButton>
        </MudCardActions>
    </MudCard>
    <MudPaper Class="pa-4">
        <MudTimeline>
            @foreach (var lesson in _lessons)
            {
                <MudTimelineItem>
                    <ItemOpposite>
                        <MudText Typo="Typo.h6">Lesson @lesson.Id</MudText>
                        <MudText Typo="Typo.h5">@lesson.Name</MudText>
                    </ItemOpposite>
                    <ItemContent>
                        <MudText>@lesson.Description</MudText>
                    </ItemContent>
                </MudTimelineItem>
            }
        </MudTimeline>
    </MudPaper>
    <MudPaper Class="pa-4">
        <MudStack>
            <MudText Typo="Typo.h5">Comments</MudText>
            <MudCard>
                <MudCardContent>
                    <MudStack>
                        <MudText Typo="Typo.h6">Write your review: </MudText>
                        <MudTextField Variant="Variant.Outlined" Label="Username" Required="true" RequiredError="Username is required!"
                                      @bind-Value="_newReview.UserName"/>
                        <MudStack Row="true">
                            <MudText Typo="Typo.body1">Rate the course: </MudText>
                            <MudRating @bind-SelectedValue="@_newReview.Rating"/>
                        </MudStack>
                        <MudTextField Variant="Variant.Outlined" T="string" Label="Write your comment here"
                                      @bind-Value="_newReview.Comment" Lines="3"/>
                    </MudStack>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto"
                               OnClick="() => AddReview()">
                        Publish
                    </MudButton>
                </MudCardActions>
            </MudCard>
            @foreach (var review in _reviews)
            {
                <ReviewComponent Review="@review"/>
            }
        </MudStack>
    </MudPaper>
</MudStack>


@code {
    [Parameter] public int Id { get; set; }

    private string title = "Course";

    private Course _course = new();
    private List<Lesson> _lessons = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _course = CoursesAccess.Instance.GetCourse(Id);
        // _lessons = LessonsAccess.Instance.GetLessons(Id);
        _lessons = LessonsAccess.Instance.GetAllLessons();
        title = _course.Name + " | Course ";
    }

    readonly List<Review> _reviews = ReviewAccess.Instance.GetAllReview().OrderByDescending(x => x.DateCreated).ToList();

    Review _newReview = new();

    private void AddReview()
    {
        _newReview.DateCreated = DateTime.Now;
        _reviews.Add(_newReview);
        _reviews.OrderByDescending(x => x.DateCreated);
        _newReview = new Review();
    }
    
    private void GoToCourse(int id)
    {
        NavigationManager.NavigateTo($"/course/{id}");
    }

}